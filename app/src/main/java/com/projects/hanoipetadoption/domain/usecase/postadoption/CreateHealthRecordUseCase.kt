package com.projects.hanoipetadoption.domain.usecase.postadoption

import com.projects.hanoipetadoption.data.model.postadoption.HealthRecord
import com.projects.hanoipetadoption.data.model.postadoption.HealthRecordCreate
import com.projects.hanoipetadoption.domain.repository.postadoption.HealthRecordRepository
import com.projects.hanoipetadoption.data.util.Result

/**
 * Use case to create a health record
 */
class CreateHealthRecordUseCase(private val repository: HealthRecordRepository) {
    /**
     * Execute the use case
     */
    suspend operator fun invoke(healthRecordDto: HealthRecordCreate): Result<HealthRecord> {
        // Map HealthRecordCreate DTO to HealthRecord domain model
        val healthRecord = HealthRecord(
            // id will be null for a new record, to be generated by the data layer
            petId = healthRecordDto.petId,
            recordType = healthRecordDto.recordType,
            notes = healthRecordDto.notes,
            weight = healthRecordDto.weight,
            recordDate = healthRecordDto.recordDate,
            nextReminderDate = healthRecordDto.nextReminderDate,
            // Assuming userId and mediaItems are handled separately or set to defaults if not in DTO
            userId = null, // Or fetch from a user session if needed
            mediaItems = emptyList() // Media items are usually added in a separate step
        )
        return repository.createHealthRecord(healthRecord)
    }
}
